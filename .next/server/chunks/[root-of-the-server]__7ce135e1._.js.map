{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Darshani/Desktop/New2/Travel-Guid/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst options = {};\r\n\r\nif (!uri) {\r\n  throw new Error(\"❌ Please define the MONGODB_URI environment variable in .env.local\");\r\n}\r\n\r\nlet client;\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // Use global variable in development to preserve value across hot reloads\r\n  if (!global._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    global._mongoClientPromise = client.connect()\r\n      .then((client) => {\r\n        console.log(\"✅ [MongoDB] Connected successfully (development)\");\r\n        return client;\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"❌ [MongoDB] Connection failed (development):\", err);\r\n        throw err;\r\n      });\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // Create a new client instance in production\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect()\r\n    .then((client) => {\r\n      console.log(\"✅ [MongoDB] Connected successfully (production)\");\r\n      return client;\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"❌ [MongoDB] Connection failed (production):\", err);\r\n      throw err;\r\n    });\r\n}\r\n\r\nexport default clientPromise;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI,CAAC,KAAK;IACR,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,0EAA0E;IAC1E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,OAAO,mBAAmB,GAAG,OAAO,OAAO,GACxC,IAAI,CAAC,CAAC;YACL,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT,GACC,KAAK,CAAC,CAAC;YACN,QAAQ,KAAK,CAAC,gDAAgD;YAC9D,MAAM;QACR;IACJ;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAYP;uCAEe","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Darshani/Desktop/New2/Travel-Guid/src/app/api/db-test/route.js"],"sourcesContent":["import clientPromise from '../../../../lib/mongodb';// adjust if your mongodb.js is elsewhere\r\n\r\nexport async function GET() {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db();\r\n    const result = await db.admin().ping();\r\n\r\n    return Response.json({ connected: true, result });\r\n  } catch (error) {\r\n    console.error(\"❌ MongoDB connection error:\", error);\r\n    return new Response(JSON.stringify({ connected: false, error: error.message }), {\r\n      status: 500,\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA,qMAAoD,yCAAyC;;AAEtF,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,gHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE;QACpB,MAAM,SAAS,MAAM,GAAG,KAAK,GAAG,IAAI;QAEpC,OAAO,SAAS,IAAI,CAAC;YAAE,WAAW;YAAM;QAAO;IACjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,WAAW;YAAO,OAAO,MAAM,OAAO;QAAC,IAAI;YAC9E,QAAQ;QACV;IACF;AACF","debugId":null}}]
}