{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Darshani/Desktop/New2/Travel-Guid/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst options = {};\r\n\r\nif (!uri) {\r\n  throw new Error(\"❌ Please define the MONGODB_URI environment variable in .env.local\");\r\n}\r\n\r\nlet client;\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // Use global variable in development to preserve value across hot reloads\r\n  if (!global._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    global._mongoClientPromise = client.connect()\r\n      .then((client) => {\r\n        console.log(\"✅ [MongoDB] Connected successfully (development)\");\r\n        return client;\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"❌ [MongoDB] Connection failed (development):\", err);\r\n        throw err;\r\n      });\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // Create a new client instance in production\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect()\r\n    .then((client) => {\r\n      console.log(\"✅ [MongoDB] Connected successfully (production)\");\r\n      return client;\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"❌ [MongoDB] Connection failed (production):\", err);\r\n      throw err;\r\n    });\r\n}\r\n\r\nexport default clientPromise;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI,CAAC,KAAK;IACR,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,0EAA0E;IAC1E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,OAAO,mBAAmB,GAAG,OAAO,OAAO,GACxC,IAAI,CAAC,CAAC;YACL,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT,GACC,KAAK,CAAC,CAAC;YACN,QAAQ,KAAK,CAAC,gDAAgD;YAC9D,MAAM;QACR;IACJ;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAYP;uCAEe","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Darshani/Desktop/New2/Travel-Guid/src/app/api/signup/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport clientPromise from '../../../../lib/mongodb';\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const { name, email, password } = await request.json();\r\n\r\n    if (!name || !email || !password) {\r\n      return NextResponse.json({ error: \"Missing required fields\" }, { status: 400 });\r\n    }\r\n\r\n    const client = await clientPromise;\r\n    const db = client.db(\"User\");\r\n\r\n    // Check if user exists\r\n    const existingUser = await db.collection(\"users\").findOne({ email });\r\n    if (existingUser) {\r\n      return NextResponse.json({ error: \"User already exists\" }, { status: 409 });\r\n    }\r\n\r\n    // TODO: You should hash passwords in production! Using plain text here for simplicity.\r\n    await db.collection(\"users\").insertOne({ name, email, password });\r\n\r\n    return NextResponse.json({ message: \"Signup successful!\" });\r\n  } catch (error) {\r\n    console.error(\"Signup error:\", error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,SAAS,MAAM,gHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,uBAAuB;QACvB,MAAM,eAAe,MAAM,GAAG,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAM;QAClE,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,uFAAuF;QACvF,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE;YAAM;YAAO;QAAS;QAE/D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAqB;IAC3D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF","debugId":null}}]
}