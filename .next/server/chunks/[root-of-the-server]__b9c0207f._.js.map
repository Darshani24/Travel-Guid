{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Darshani/Desktop/New2/Travel-Guid/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst options = {};\r\n\r\nif (!uri) {\r\n  throw new Error(\"❌ Please define the MONGODB_URI environment variable in .env.local\");\r\n}\r\n\r\nlet client;\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // Use global variable in development to preserve value across hot reloads\r\n  if (!global._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    global._mongoClientPromise = client.connect()\r\n      .then((client) => {\r\n        console.log(\"✅ [MongoDB] Connected successfully (development)\");\r\n        return client;\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"❌ [MongoDB] Connection failed (development):\", err);\r\n        throw err;\r\n      });\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // Create a new client instance in production\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect()\r\n    .then((client) => {\r\n      console.log(\"✅ [MongoDB] Connected successfully (production)\");\r\n      return client;\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"❌ [MongoDB] Connection failed (production):\", err);\r\n      throw err;\r\n    });\r\n}\r\n\r\nexport default clientPromise;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI,CAAC,KAAK;IACR,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,0EAA0E;IAC1E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,OAAO,mBAAmB,GAAG,OAAO,OAAO,GACxC,IAAI,CAAC,CAAC;YACL,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT,GACC,KAAK,CAAC,CAAC;YACN,QAAQ,KAAK,CAAC,gDAAgD;YAC9D,MAAM;QACR;IACJ;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAYP;uCAEe","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Darshani/Desktop/New2/Travel-Guid/src/app/api/contact/route.js"],"sourcesContent":["import clientPromise from '../../../../lib/mongodb';\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(); // default db from URI\r\n    const collection = db.collection('contacts');\r\n\r\n    const { name, email, message } = await req.json();\r\n\r\n    if (!name || !email || !message) {\r\n      return new Response(JSON.stringify({ error: 'Missing fields' }), { status: 400 });\r\n    }\r\n\r\n    await collection.insertOne({ name, email, message, createdAt: new Date() });\r\n\r\n    return new Response(JSON.stringify({ success: true }), { status: 201 });\r\n  } catch (err) {\r\n    console.error(err);\r\n    return new Response(JSON.stringify({ error: 'Server error' }), { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,SAAS,MAAM,gHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,IAAI,sBAAsB;QAC9C,MAAM,aAAa,GAAG,UAAU,CAAC;QAEjC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS;YAC/B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAiB,IAAI;gBAAE,QAAQ;YAAI;QACjF;QAEA,MAAM,WAAW,SAAS,CAAC;YAAE;YAAM;YAAO;YAAS,WAAW,IAAI;QAAO;QAEzE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;QAAK,IAAI;YAAE,QAAQ;QAAI;IACvE,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAe,IAAI;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}